module NTank;

data HybridSpec =  ObjInv(String) | Ensures(String) | Requires(String) | TimedRequires(String);

type Real = Rat;

interface ITank {
	[HybridSpec: Requires("-1/2 < newDrain & newDrain < 1/2")]
    Unit setDrain(Real newDrain);

    Real getValveStatus();
}

[HybridSpec: Requires("3 < inVal & inVal < 10")]
class CSingleTank(Real inVal) implements ITank{

[HybridSpec: ObjInv("3 <= level & level <= 10")]
    physical{
        Real level = inVal : level' = drain;
        Real drain = -1/2 : drain' = 0;
    }

    { this!ctrl(); }

    Unit ctrl(){
        //await diff level <= 3 & drain <= 0 | level >= 10 & drain >= 0;
        await diff level <= 3 | level >= 10;
        if(level <= 3)     drain =  1/2;
        else               drain = -1/2;
        this!ctrl();
    }

    Unit setDrain(Real newDrain){
    	if(newDrain < 0 && level >= 4) drain = newDrain;
    	if(newDrain > 0 && level <= 9) drain = newDrain;
    }

	[HybridSpec: Ensures("result > 0 <-> drain >= 0")]
    Real getValveStatus(){
    	Real ret = 0;
    	if(drain >= 0)  ret = 1;
    	else            ret = -1;
    	return ret;
    }

    Unit dummy(){
        Real r = 0;
        r = r/2;
        this!getValveStatus();
        this!setDrain(r);
    }
}

{
	new CSingleTank(5);
}

