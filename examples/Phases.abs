module PhaseModule;

data HybridSpec =  ObjInv(String) | Ensures(String) | Requires(String) | TimedRequires(String) | Tactic(String);

type Real = Rat;

//This models a hybridized diode
//beware: Right now this has funny simulation behavior because ctrl2 is not modeling an event correctly
class Diode {

[HybridSpec: ObjInv("(flag = 1 | flag = 0) & (w > 0 -> ( flag = 1 & diode = w & diode' = w')) & (w <= 0 -> ( flag = 0 & diode = 0 & diode' = 0)) & diode >= 0")]
	physical{
		Real v = 0: v' = w;
		Real w = 1: w' = -v;
		Real diode = 1: diode' = -v*flag;
		Real flag = 1: flag' = 0;
	}


	Unit run(){
		this!ctrl1();
	}

[HybridSpec: Tactic("expandAllDefs; master; <( fullSimplify ; DEs(1) ; master, DW(1) ; fullSimplify ; master ; DEs(1) ; master )")]
	Unit ctrl1(){
		await diff w <= 0;
		if(flag == 1)
		    flag = 0;
		this!ctrl2();
	}

[HybridSpec: Tactic("expandAllDefs; master ; <( fullSimplify ; DEs(1) ; master,  DW(1) ; DEs(1) ; master )")]
	Unit ctrl2(){
		await diff w > 0;
		if(flag == 0)
		    flag = 1;
		this!ctrl1();
	}

}

{
	new Diode();
}
